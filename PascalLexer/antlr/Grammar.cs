//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/cthfvrl/Code/hw/ide-dev/PascalLexer/antlr/Grammar.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class Grammar : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Number=1;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"Number", "Sign", "UnsignedInteger", "UnsignedReal", "DigitSequence", 
		"BinSequence", "HexSequence", "OctalSequence", "Hex", "Octal", "Bin", 
		"Digit", "ScaleFactor"
	};


	public Grammar(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public Grammar(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "Number"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static Grammar() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x3', 'Y', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x3', '\x2', '\x5', '\x2', '\x1F', '\n', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x5', '\x2', '#', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '.', '\n', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x33', '\n', '\x5', '\x3', 
		'\x5', '\x5', '\x5', '\x36', '\n', '\x5', '\x3', '\x6', '\x6', '\x6', 
		'\x39', '\n', '\x6', '\r', '\x6', '\xE', '\x6', ':', '\x3', '\a', '\x6', 
		'\a', '>', '\n', '\a', '\r', '\a', '\xE', '\a', '?', '\x3', '\b', '\x6', 
		'\b', '\x43', '\n', '\b', '\r', '\b', '\xE', '\b', '\x44', '\x3', '\t', 
		'\x6', '\t', 'H', '\n', '\t', '\r', '\t', '\xE', '\t', 'I', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 'V', '\n', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x2', '\x2', '\xF', '\x3', '\x3', 
		'\x5', '\x2', '\a', '\x2', '\t', '\x2', '\v', '\x2', '\r', '\x2', '\xF', 
		'\x2', '\x11', '\x2', '\x13', '\x2', '\x15', '\x2', '\x17', '\x2', '\x19', 
		'\x2', '\x1B', '\x2', '\x3', '\x2', '\b', '\x4', '\x2', '-', '-', '/', 
		'/', '\x5', '\x2', '\x32', ';', '\x43', 'H', '\x63', 'h', '\x3', '\x2', 
		'\x32', '\x39', '\x3', '\x2', '\x32', '\x33', '\x3', '\x2', '\x32', ';', 
		'\x4', '\x2', 'G', 'G', 'g', 'g', '\x2', 'X', '\x2', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x3', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x5', '$', '\x3', 
		'\x2', '\x2', '\x2', '\a', '-', '\x3', '\x2', '\x2', '\x2', '\t', '/', 
		'\x3', '\x2', '\x2', '\x2', '\v', '\x38', '\x3', '\x2', '\x2', '\x2', 
		'\r', '=', '\x3', '\x2', '\x2', '\x2', '\xF', '\x42', '\x3', '\x2', '\x2', 
		'\x2', '\x11', 'G', '\x3', '\x2', '\x2', '\x2', '\x13', 'K', '\x3', '\x2', 
		'\x2', '\x2', '\x15', 'M', '\x3', '\x2', '\x2', '\x2', '\x17', 'O', '\x3', 
		'\x2', '\x2', '\x2', '\x19', 'Q', '\x3', '\x2', '\x2', '\x2', '\x1B', 
		'S', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1F', '\x5', '\x5', '\x3', 
		'\x2', '\x1E', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', '\"', '\x3', '\x2', '\x2', '\x2', ' ', '#', 
		'\x5', '\a', '\x4', '\x2', '!', '#', '\x5', '\t', '\x5', '\x2', '\"', 
		' ', '\x3', '\x2', '\x2', '\x2', '\"', '!', '\x3', '\x2', '\x2', '\x2', 
		'#', '\x4', '\x3', '\x2', '\x2', '\x2', '$', '%', '\t', '\x2', '\x2', 
		'\x2', '%', '\x6', '\x3', '\x2', '\x2', '\x2', '&', '.', '\x5', '\v', 
		'\x6', '\x2', '\'', '(', '\a', '&', '\x2', '\x2', '(', '.', '\x5', '\xF', 
		'\b', '\x2', ')', '*', '\a', '(', '\x2', '\x2', '*', '.', '\x5', '\x11', 
		'\t', '\x2', '+', ',', '\a', '\'', '\x2', '\x2', ',', '.', '\x5', '\r', 
		'\a', '\x2', '-', '&', '\x3', '\x2', '\x2', '\x2', '-', '\'', '\x3', '\x2', 
		'\x2', '\x2', '-', ')', '\x3', '\x2', '\x2', '\x2', '-', '+', '\x3', '\x2', 
		'\x2', '\x2', '.', '\b', '\x3', '\x2', '\x2', '\x2', '/', '\x32', '\x5', 
		'\v', '\x6', '\x2', '\x30', '\x31', '\a', '\x30', '\x2', '\x2', '\x31', 
		'\x33', '\x5', '\v', '\x6', '\x2', '\x32', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\x33', '\x3', '\x2', '\x2', '\x2', '\x33', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\x36', '\x5', '\x1B', '\xE', '\x2', '\x35', 
		'\x34', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\x3', '\x2', '\x2', 
		'\x2', '\x36', '\n', '\x3', '\x2', '\x2', '\x2', '\x37', '\x39', '\x5', 
		'\x19', '\r', '\x2', '\x38', '\x37', '\x3', '\x2', '\x2', '\x2', '\x39', 
		':', '\x3', '\x2', '\x2', '\x2', ':', '\x38', '\x3', '\x2', '\x2', '\x2', 
		':', ';', '\x3', '\x2', '\x2', '\x2', ';', '\f', '\x3', '\x2', '\x2', 
		'\x2', '<', '>', '\x5', '\x17', '\f', '\x2', '=', '<', '\x3', '\x2', '\x2', 
		'\x2', '>', '?', '\x3', '\x2', '\x2', '\x2', '?', '=', '\x3', '\x2', '\x2', 
		'\x2', '?', '@', '\x3', '\x2', '\x2', '\x2', '@', '\xE', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '\x43', '\x5', '\x13', '\n', '\x2', '\x42', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x42', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\x3', '\x2', 
		'\x2', '\x2', '\x45', '\x10', '\x3', '\x2', '\x2', '\x2', '\x46', 'H', 
		'\x5', '\x15', '\v', '\x2', 'G', '\x46', '\x3', '\x2', '\x2', '\x2', 'H', 
		'I', '\x3', '\x2', '\x2', '\x2', 'I', 'G', '\x3', '\x2', '\x2', '\x2', 
		'I', 'J', '\x3', '\x2', '\x2', '\x2', 'J', '\x12', '\x3', '\x2', '\x2', 
		'\x2', 'K', 'L', '\t', '\x3', '\x2', '\x2', 'L', '\x14', '\x3', '\x2', 
		'\x2', '\x2', 'M', 'N', '\t', '\x4', '\x2', '\x2', 'N', '\x16', '\x3', 
		'\x2', '\x2', '\x2', 'O', 'P', '\t', '\x5', '\x2', '\x2', 'P', '\x18', 
		'\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\t', '\x6', '\x2', '\x2', 'R', 
		'\x1A', '\x3', '\x2', '\x2', '\x2', 'S', 'U', '\t', '\a', '\x2', '\x2', 
		'T', 'V', '\x5', '\x5', '\x3', '\x2', 'U', 'T', '\x3', '\x2', '\x2', '\x2', 
		'U', 'V', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\x3', '\x2', '\x2', '\x2', 
		'W', 'X', '\x5', '\v', '\x6', '\x2', 'X', '\x1C', '\x3', '\x2', '\x2', 
		'\x2', '\r', '\x2', '\x1E', '\"', '-', '\x32', '\x35', ':', '?', '\x44', 
		'I', 'U', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
