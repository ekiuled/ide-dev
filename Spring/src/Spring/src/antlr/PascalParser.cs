//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/cthfvrl/MSE/code/ide-dev/Spring/src/Spring/src/antlr/PascalParser.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class PascalParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Number=1, UnsignedInteger=2, UnsignedReal=3, Plus=4, DigitSequence=5, 
		CharacterString=6, Comment=7, Semicolon=8, Colon=9, LBrace=10, RBrace=11, 
		LBracket=12, RBracket=13, Comma=14, Dots=15, At=16, Assignment=17, Assign=18, 
		PlusAssign=19, MinusAssign=20, MultAssign=21, DivAssign=22, RelationalOperator=23, 
		In=24, Is=25, AddingOperator=26, Or=27, Xor=28, MultiplicationOperator=29, 
		Div=30, Mod=31, And=32, Shl=33, Shr=34, As=35, Nil=36, Begin=37, End=38, 
		Goto=39, Not=40, Signum=41, Case=42, Of=43, Else=44, Otherwise=45, If=46, 
		Then=47, For=48, To=49, Downto=50, Do=51, Repeat=52, Until=53, While=54, 
		With=55, Identifier=56, Symbol=57, Whitespace=58, Error=59;
	public const int
		RULE_program = 0, RULE_compoundStatement = 1, RULE_statement = 2, RULE_simpleStatement = 3, 
		RULE_assigmnentStatement = 4, RULE_assignment = 5, RULE_procedureStatement = 6, 
		RULE_gotoStatement = 7, RULE_label = 8, RULE_structuredStatement = 9, 
		RULE_conditionalStatement = 10, RULE_repetitiveStatement = 11, RULE_caseStatement = 12, 
		RULE_case = 13, RULE_caseRange = 14, RULE_constant = 15, RULE_elsePart = 16, 
		RULE_ifStatement = 17, RULE_forStatement = 18, RULE_repeatStatement = 19, 
		RULE_whileStatement = 20, RULE_withStatement = 21, RULE_expression = 22, 
		RULE_simpleExpression = 23, RULE_term = 24, RULE_factor = 25, RULE_functionCall = 26, 
		RULE_actualParameterList = 27, RULE_unsignedConstant = 28, RULE_setConstructor = 29, 
		RULE_setGroup = 30, RULE_valueTypecast = 31, RULE_addressFactor = 32;
	public static readonly string[] ruleNames = {
		"program", "compoundStatement", "statement", "simpleStatement", "assigmnentStatement", 
		"assignment", "procedureStatement", "gotoStatement", "label", "structuredStatement", 
		"conditionalStatement", "repetitiveStatement", "caseStatement", "case", 
		"caseRange", "constant", "elsePart", "ifStatement", "forStatement", "repeatStatement", 
		"whileStatement", "withStatement", "expression", "simpleExpression", "term", 
		"factor", "functionCall", "actualParameterList", "unsignedConstant", "setConstructor", 
		"setGroup", "valueTypecast", "addressFactor"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'+'", null, null, null, "';'", "':'", "'('", 
		"')'", "'['", "']'", "','", "'..'", "'@'", null, "':='", "'+='", "'-='", 
		"'*='", "'/='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Number", "UnsignedInteger", "UnsignedReal", "Plus", "DigitSequence", 
		"CharacterString", "Comment", "Semicolon", "Colon", "LBrace", "RBrace", 
		"LBracket", "RBracket", "Comma", "Dots", "At", "Assignment", "Assign", 
		"PlusAssign", "MinusAssign", "MultAssign", "DivAssign", "RelationalOperator", 
		"In", "Is", "AddingOperator", "Or", "Xor", "MultiplicationOperator", "Div", 
		"Mod", "And", "Shl", "Shr", "As", "Nil", "Begin", "End", "Goto", "Not", 
		"Signum", "Case", "Of", "Else", "Otherwise", "If", "Then", "For", "To", 
		"Downto", "Do", "Repeat", "Until", "While", "With", "Identifier", "Symbol", 
		"Whitespace", "Error"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PascalParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static PascalParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PascalParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PascalParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PascalParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			compoundStatement();
			State = 67;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Begin() { return GetToken(PascalParser.Begin, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(PascalParser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Semicolon() { return GetTokens(PascalParser.Semicolon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon(int i) {
			return GetToken(PascalParser.Semicolon, i);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterCompoundStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitCompoundStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_compoundStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			Match(Begin);
			State = 70;
			statement();
			State = 75;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 71;
					Match(Semicolon);
					State = 72;
					statement();
					}
					} 
				}
				State = 77;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Semicolon) {
				{
				State = 78;
				Match(Semicolon);
				}
			}

			State = 81;
			Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructuredStatementContext structuredStatement() {
			return GetRuleContext<StructuredStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(PascalParser.Colon, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 83;
				label();
				State = 84;
				Match(Colon);
				}
				break;
			}
			State = 90;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Goto:
			case Identifier:
				{
				State = 88;
				simpleStatement();
				}
				break;
			case Begin:
			case Case:
			case If:
			case For:
			case Repeat:
			case While:
			case With:
				{
				State = 89;
				structuredStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssigmnentStatementContext assigmnentStatement() {
			return GetRuleContext<AssigmnentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureStatementContext procedureStatement() {
			return GetRuleContext<ProcedureStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GotoStatementContext gotoStatement() {
			return GetRuleContext<GotoStatementContext>(0);
		}
		public SimpleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterSimpleStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitSimpleStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleStatementContext simpleStatement() {
		SimpleStatementContext _localctx = new SimpleStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_simpleStatement);
		try {
			State = 95;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 92;
				assigmnentStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 93;
				procedureStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 94;
				gotoStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssigmnentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PascalParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssigmnentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assigmnentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterAssigmnentStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitAssigmnentStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssigmnentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssigmnentStatementContext assigmnentStatement() {
		AssigmnentStatementContext _localctx = new AssigmnentStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_assigmnentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			Match(Identifier);
			State = 98;
			assignment();
			State = 99;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(PascalParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(PascalParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusAssign() { return GetToken(PascalParser.MinusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultAssign() { return GetToken(PascalParser.MultAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivAssign() { return GetToken(PascalParser.DivAssign, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 10, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Plus) | (1L << Assign) | (1L << MinusAssign) | (1L << MultAssign) | (1L << DivAssign))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PascalParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActualParameterListContext actualParameterList() {
			return GetRuleContext<ActualParameterListContext>(0);
		}
		public ProcedureStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterProcedureStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitProcedureStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureStatementContext procedureStatement() {
		ProcedureStatementContext _localctx = new ProcedureStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_procedureStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			Match(Identifier);
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBrace) {
				{
				State = 104;
				actualParameterList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Goto() { return GetToken(PascalParser.Goto, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public GotoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterGotoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitGotoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotoStatementContext gotoStatement() {
		GotoStatementContext _localctx = new GotoStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_gotoStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			Match(Goto);
			State = 108;
			label();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DigitSequence() { return GetToken(PascalParser.DigitSequence, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PascalParser.Identifier, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 16, RULE_label);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			_la = TokenStream.LA(1);
			if ( !(_la==DigitSequence || _la==Identifier) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructuredStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalStatementContext conditionalStatement() {
			return GetRuleContext<ConditionalStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepetitiveStatementContext repetitiveStatement() {
			return GetRuleContext<RepetitiveStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithStatementContext withStatement() {
			return GetRuleContext<WithStatementContext>(0);
		}
		public StructuredStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structuredStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterStructuredStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitStructuredStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructuredStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructuredStatementContext structuredStatement() {
		StructuredStatementContext _localctx = new StructuredStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_structuredStatement);
		try {
			State = 116;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Begin:
				EnterOuterAlt(_localctx, 1);
				{
				State = 112;
				compoundStatement();
				}
				break;
			case Case:
			case If:
				EnterOuterAlt(_localctx, 2);
				{
				State = 113;
				conditionalStatement();
				}
				break;
			case For:
			case Repeat:
			case While:
				EnterOuterAlt(_localctx, 3);
				{
				State = 114;
				repetitiveStatement();
				}
				break;
			case With:
				EnterOuterAlt(_localctx, 4);
				{
				State = 115;
				withStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext caseStatement() {
			return GetRuleContext<CaseStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ConditionalStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterConditionalStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitConditionalStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalStatementContext conditionalStatement() {
		ConditionalStatementContext _localctx = new ConditionalStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_conditionalStatement);
		try {
			State = 120;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Case:
				EnterOuterAlt(_localctx, 1);
				{
				State = 118;
				caseStatement();
				}
				break;
			case If:
				EnterOuterAlt(_localctx, 2);
				{
				State = 119;
				ifStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepetitiveStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatStatementContext repeatStatement() {
			return GetRuleContext<RepeatStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public RepetitiveStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repetitiveStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterRepetitiveStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitRepetitiveStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepetitiveStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepetitiveStatementContext repetitiveStatement() {
		RepetitiveStatementContext _localctx = new RepetitiveStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_repetitiveStatement);
		try {
			State = 125;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case For:
				EnterOuterAlt(_localctx, 1);
				{
				State = 122;
				forStatement();
				}
				break;
			case Repeat:
				EnterOuterAlt(_localctx, 2);
				{
				State = 123;
				repeatStatement();
				}
				break;
			case While:
				EnterOuterAlt(_localctx, 3);
				{
				State = 124;
				whileStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(PascalParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Of() { return GetToken(PascalParser.Of, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseContext[] @case() {
			return GetRuleContexts<CaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseContext @case(int i) {
			return GetRuleContext<CaseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(PascalParser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Semicolon() { return GetTokens(PascalParser.Semicolon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon(int i) {
			return GetToken(PascalParser.Semicolon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElsePartContext elsePart() {
			return GetRuleContext<ElsePartContext>(0);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_caseStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			Match(Case);
			State = 128;
			expression();
			State = 129;
			Match(Of);
			State = 130;
			@case();
			State = 135;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 131;
					Match(Semicolon);
					State = 132;
					@case();
					}
					} 
				}
				State = 137;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Else || _la==Otherwise) {
				{
				State = 138;
				elsePart();
				}
			}

			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Semicolon) {
				{
				State = 141;
				Match(Semicolon);
				}
			}

			State = 144;
			Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseRangeContext[] caseRange() {
			return GetRuleContexts<CaseRangeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseRangeContext caseRange(int i) {
			return GetRuleContext<CaseRangeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(PascalParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(PascalParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(PascalParser.Comma, i);
		}
		public CaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseContext @case() {
		CaseContext _localctx = new CaseContext(Context, State);
		EnterRule(_localctx, 26, RULE_case);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			caseRange();
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 147;
				Match(Comma);
				State = 148;
				caseRange();
				}
				}
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 154;
			Match(Colon);
			State = 155;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dots() { return GetToken(PascalParser.Dots, 0); }
		public CaseRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterCaseRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitCaseRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseRangeContext caseRange() {
		CaseRangeContext _localctx = new CaseRangeContext(Context, State);
		EnterRule(_localctx, 28, RULE_caseRange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			constant();
			State = 160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Dots) {
				{
				State = 158;
				Match(Dots);
				State = 159;
				constant();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(PascalParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CharacterString() { return GetToken(PascalParser.CharacterString, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 30, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			_la = TokenStream.LA(1);
			if ( !(_la==Number || _la==CharacterString) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElsePartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(PascalParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Otherwise() { return GetToken(PascalParser.Otherwise, 0); }
		public ElsePartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elsePart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterElsePart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitElsePart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElsePart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElsePartContext elsePart() {
		ElsePartContext _localctx = new ElsePartContext(Context, State);
		EnterRule(_localctx, 32, RULE_elsePart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			_la = TokenStream.LA(1);
			if ( !(_la==Else || _la==Otherwise) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 165;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(PascalParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Then() { return GetToken(PascalParser.Then, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(PascalParser.Else, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			Match(If);
			State = 168;
			expression();
			State = 169;
			Match(Then);
			State = 170;
			statement();
			State = 173;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 171;
				Match(Else);
				State = 172;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(PascalParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PascalParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(PascalParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(PascalParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode To() { return GetToken(PascalParser.To, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Downto() { return GetToken(PascalParser.Downto, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(PascalParser.In, 0); }
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_forStatement);
		int _la;
		try {
			State = 191;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 175;
				Match(For);
				State = 176;
				Match(Identifier);
				State = 177;
				Match(Assign);
				State = 178;
				expression();
				State = 179;
				_la = TokenStream.LA(1);
				if ( !(_la==To || _la==Downto) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 180;
				expression();
				State = 181;
				Match(Do);
				State = 182;
				statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 184;
				Match(For);
				State = 185;
				Match(Identifier);
				State = 186;
				Match(In);
				State = 187;
				expression();
				State = 188;
				Match(Do);
				State = 189;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Repeat() { return GetToken(PascalParser.Repeat, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Until() { return GetToken(PascalParser.Until, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Semicolon() { return GetTokens(PascalParser.Semicolon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon(int i) {
			return GetToken(PascalParser.Semicolon, i);
		}
		public RepeatStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterRepeatStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitRepeatStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatStatementContext repeatStatement() {
		RepeatStatementContext _localctx = new RepeatStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_repeatStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			Match(Repeat);
			State = 194;
			statement();
			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Semicolon) {
				{
				{
				State = 195;
				Match(Semicolon);
				State = 196;
				statement();
				}
				}
				State = 201;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 202;
			Match(Until);
			State = 203;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(PascalParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(PascalParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			Match(While);
			State = 206;
			expression();
			State = 207;
			Match(Do);
			State = 208;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode With() { return GetToken(PascalParser.With, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(PascalParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(PascalParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(PascalParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(PascalParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(PascalParser.Comma, i);
		}
		public WithStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterWithStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitWithStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithStatementContext withStatement() {
		WithStatementContext _localctx = new WithStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_withStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			Match(With);
			State = 211;
			Match(Identifier);
			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 212;
				Match(Comma);
				State = 213;
				Match(Identifier);
				}
				}
				State = 218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 219;
			Match(Do);
			State = 220;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext[] simpleExpression() {
			return GetRuleContexts<SimpleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression(int i) {
			return GetRuleContext<SimpleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RelationalOperator() { return GetToken(PascalParser.RelationalOperator, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			simpleExpression();
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RelationalOperator) {
				{
				State = 223;
				Match(RelationalOperator);
				State = 224;
				simpleExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AddingOperator() { return GetTokens(PascalParser.AddingOperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AddingOperator(int i) {
			return GetToken(PascalParser.AddingOperator, i);
		}
		public SimpleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterSimpleExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitSimpleExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExpressionContext simpleExpression() {
		SimpleExpressionContext _localctx = new SimpleExpressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_simpleExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			term();
			State = 232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AddingOperator) {
				{
				{
				State = 228;
				Match(AddingOperator);
				State = 229;
				term();
				}
				}
				State = 234;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MultiplicationOperator() { return GetTokens(PascalParser.MultiplicationOperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultiplicationOperator(int i) {
			return GetToken(PascalParser.MultiplicationOperator, i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 48, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			factor();
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MultiplicationOperator) {
				{
				{
				State = 236;
				Match(MultiplicationOperator);
				State = 237;
				factor();
				}
				}
				State = 242;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBrace() { return GetToken(PascalParser.LBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBrace() { return GetToken(PascalParser.RBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PascalParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedConstantContext unsignedConstant() {
			return GetRuleContext<UnsignedConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(PascalParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Signum() { return GetToken(PascalParser.Signum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SetConstructorContext setConstructor() {
			return GetRuleContext<SetConstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueTypecastContext valueTypecast() {
			return GetRuleContext<ValueTypecastContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddressFactorContext addressFactor() {
			return GetRuleContext<AddressFactorContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 50, RULE_factor);
		try {
			State = 257;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 243;
				Match(LBrace);
				State = 244;
				expression();
				State = 245;
				Match(RBrace);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 247;
				Match(Identifier);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 248;
				functionCall();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 249;
				unsignedConstant();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 250;
				Match(Not);
				State = 251;
				factor();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 252;
				Match(Signum);
				State = 253;
				factor();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 254;
				setConstructor();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 255;
				valueTypecast();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 256;
				addressFactor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PascalParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActualParameterListContext actualParameterList() {
			return GetRuleContext<ActualParameterListContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 52, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			Match(Identifier);
			State = 261;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBrace) {
				{
				State = 260;
				actualParameterList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActualParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBrace() { return GetToken(PascalParser.LBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBrace() { return GetToken(PascalParser.RBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(PascalParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(PascalParser.Comma, i);
		}
		public ActualParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actualParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterActualParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitActualParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActualParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActualParameterListContext actualParameterList() {
		ActualParameterListContext _localctx = new ActualParameterListContext(Context, State);
		EnterRule(_localctx, 54, RULE_actualParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			Match(LBrace);
			State = 272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Number) | (1L << CharacterString) | (1L << LBrace) | (1L << LBracket) | (1L << At) | (1L << Nil) | (1L << Not) | (1L << Signum) | (1L << Identifier))) != 0)) {
				{
				State = 264;
				expression();
				State = 269;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 265;
					Match(Comma);
					State = 266;
					expression();
					}
					}
					State = 271;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 274;
			Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignedConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(PascalParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CharacterString() { return GetToken(PascalParser.CharacterString, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Nil() { return GetToken(PascalParser.Nil, 0); }
		public UnsignedConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignedConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterUnsignedConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitUnsignedConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignedConstantContext unsignedConstant() {
		UnsignedConstantContext _localctx = new UnsignedConstantContext(Context, State);
		EnterRule(_localctx, 56, RULE_unsignedConstant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Number) | (1L << CharacterString) | (1L << Nil))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetConstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBracket() { return GetToken(PascalParser.LBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SetGroupContext[] setGroup() {
			return GetRuleContexts<SetGroupContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetGroupContext setGroup(int i) {
			return GetRuleContext<SetGroupContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBracket() { return GetToken(PascalParser.RBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(PascalParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(PascalParser.Comma, i);
		}
		public SetConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setConstructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterSetConstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitSetConstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetConstructorContext setConstructor() {
		SetConstructorContext _localctx = new SetConstructorContext(Context, State);
		EnterRule(_localctx, 58, RULE_setConstructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			Match(LBracket);
			State = 279;
			setGroup();
			State = 284;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 280;
				Match(Comma);
				State = 281;
				setGroup();
				}
				}
				State = 286;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 287;
			Match(RBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dots() { return GetToken(PascalParser.Dots, 0); }
		public SetGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterSetGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitSetGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetGroupContext setGroup() {
		SetGroupContext _localctx = new SetGroupContext(Context, State);
		EnterRule(_localctx, 60, RULE_setGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			expression();
			State = 292;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Dots) {
				{
				State = 290;
				Match(Dots);
				State = 291;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueTypecastContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PascalParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBrace() { return GetToken(PascalParser.LBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBrace() { return GetToken(PascalParser.RBrace, 0); }
		public ValueTypecastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueTypecast; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterValueTypecast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitValueTypecast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueTypecast(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueTypecastContext valueTypecast() {
		ValueTypecastContext _localctx = new ValueTypecastContext(Context, State);
		EnterRule(_localctx, 62, RULE_valueTypecast);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			Match(Identifier);
			State = 295;
			Match(LBrace);
			State = 296;
			expression();
			State = 297;
			Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddressFactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode At() { return GetToken(PascalParser.At, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PascalParser.Identifier, 0); }
		public AddressFactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addressFactor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterAddressFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitAddressFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddressFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddressFactorContext addressFactor() {
		AddressFactorContext _localctx = new AddressFactorContext(Context, State);
		EnterRule(_localctx, 64, RULE_addressFactor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			Match(At);
			State = 300;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '=', '\x131', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\a', '\x3', 'L', '\n', '\x3', '\f', '\x3', '\xE', 
		'\x3', 'O', '\v', '\x3', '\x3', '\x3', '\x5', '\x3', 'R', '\n', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', 'Y', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 
		']', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\x62', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x5', '\b', 
		'l', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 
		'w', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x5', '\f', '{', '\n', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x80', '\n', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\a', '\xE', '\x88', '\n', '\xE', '\f', '\xE', '\xE', '\xE', 
		'\x8B', '\v', '\xE', '\x3', '\xE', '\x5', '\xE', '\x8E', '\n', '\xE', 
		'\x3', '\xE', '\x5', '\xE', '\x91', '\n', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\x98', 
		'\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x9B', '\v', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x5', '\x10', '\xA3', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xB0', 
		'\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\xC2', '\n', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', '\xC8', 
		'\n', '\x15', '\f', '\x15', '\xE', '\x15', '\xCB', '\v', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\a', '\x17', '\xD9', '\n', '\x17', '\f', '\x17', 
		'\xE', '\x17', '\xDC', '\v', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\xE4', 
		'\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\a', '\x19', 
		'\xE9', '\n', '\x19', '\f', '\x19', '\xE', '\x19', '\xEC', '\v', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', '\xF1', '\n', 
		'\x1A', '\f', '\x1A', '\xE', '\x1A', '\xF4', '\v', '\x1A', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x104', '\n', 
		'\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x108', '\n', '\x1C', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\a', '\x1D', 
		'\x10E', '\n', '\x1D', '\f', '\x1D', '\xE', '\x1D', '\x111', '\v', '\x1D', 
		'\x5', '\x1D', '\x113', '\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\a', '\x1F', '\x11D', '\n', '\x1F', '\f', '\x1F', '\xE', '\x1F', 
		'\x120', '\v', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x5', ' ', '\x127', '\n', ' ', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x2', '\x2', '#', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '>', '@', '\x42', '\x2', '\b', '\x5', '\x2', '\x6', 
		'\x6', '\x14', '\x14', '\x16', '\x18', '\x4', '\x2', '\a', '\a', ':', 
		':', '\x4', '\x2', '\x3', '\x3', '\b', '\b', '\x3', '\x2', '.', '/', '\x3', 
		'\x2', '\x33', '\x34', '\x5', '\x2', '\x3', '\x3', '\b', '\b', '&', '&', 
		'\x2', '\x135', '\x2', '\x44', '\x3', '\x2', '\x2', '\x2', '\x4', 'G', 
		'\x3', '\x2', '\x2', '\x2', '\x6', 'X', '\x3', '\x2', '\x2', '\x2', '\b', 
		'\x61', '\x3', '\x2', '\x2', '\x2', '\n', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\f', 'g', '\x3', '\x2', '\x2', '\x2', '\xE', 'i', '\x3', '\x2', 
		'\x2', '\x2', '\x10', 'm', '\x3', '\x2', '\x2', '\x2', '\x12', 'p', '\x3', 
		'\x2', '\x2', '\x2', '\x14', 'v', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'z', '\x3', '\x2', '\x2', '\x2', '\x18', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x81', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x94', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\x9F', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\xA4', '\x3', '\x2', '\x2', '\x2', '\"', '\xA6', '\x3', '\x2', '\x2', 
		'\x2', '$', '\xA9', '\x3', '\x2', '\x2', '\x2', '&', '\xC1', '\x3', '\x2', 
		'\x2', '\x2', '(', '\xC3', '\x3', '\x2', '\x2', '\x2', '*', '\xCF', '\x3', 
		'\x2', '\x2', '\x2', ',', '\xD4', '\x3', '\x2', '\x2', '\x2', '.', '\xE0', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\xE5', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\xED', '\x3', '\x2', '\x2', '\x2', '\x34', '\x103', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x105', '\x3', '\x2', '\x2', '\x2', '\x38', '\x109', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x116', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x118', '\x3', '\x2', '\x2', '\x2', '>', '\x123', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x128', '\x3', '\x2', '\x2', '\x2', '\x42', '\x12D', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\x5', '\x4', '\x3', '\x2', 
		'\x45', '\x46', '\a', '\x2', '\x2', '\x3', '\x46', '\x3', '\x3', '\x2', 
		'\x2', '\x2', 'G', 'H', '\a', '\'', '\x2', '\x2', 'H', 'M', '\x5', '\x6', 
		'\x4', '\x2', 'I', 'J', '\a', '\n', '\x2', '\x2', 'J', 'L', '\x5', '\x6', 
		'\x4', '\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 'L', 'O', '\x3', '\x2', 
		'\x2', '\x2', 'M', 'K', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\x3', '\x2', 
		'\x2', '\x2', 'N', 'Q', '\x3', '\x2', '\x2', '\x2', 'O', 'M', '\x3', '\x2', 
		'\x2', '\x2', 'P', 'R', '\a', '\n', '\x2', '\x2', 'Q', 'P', '\x3', '\x2', 
		'\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x3', '\x2', 
		'\x2', '\x2', 'S', 'T', '\a', '(', '\x2', '\x2', 'T', '\x5', '\x3', '\x2', 
		'\x2', '\x2', 'U', 'V', '\x5', '\x12', '\n', '\x2', 'V', 'W', '\a', '\v', 
		'\x2', '\x2', 'W', 'Y', '\x3', '\x2', '\x2', '\x2', 'X', 'U', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'Y', '\x3', '\x2', '\x2', '\x2', 'Y', '\\', '\x3', 
		'\x2', '\x2', '\x2', 'Z', ']', '\x5', '\b', '\x5', '\x2', '[', ']', '\x5', 
		'\x14', '\v', '\x2', '\\', 'Z', '\x3', '\x2', '\x2', '\x2', '\\', '[', 
		'\x3', '\x2', '\x2', '\x2', ']', '\a', '\x3', '\x2', '\x2', '\x2', '^', 
		'\x62', '\x5', '\n', '\x6', '\x2', '_', '\x62', '\x5', '\xE', '\b', '\x2', 
		'`', '\x62', '\x5', '\x10', '\t', '\x2', '\x61', '^', '\x3', '\x2', '\x2', 
		'\x2', '\x61', '_', '\x3', '\x2', '\x2', '\x2', '\x61', '`', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\t', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', 
		'\a', ':', '\x2', '\x2', '\x64', '\x65', '\x5', '\f', '\a', '\x2', '\x65', 
		'\x66', '\x5', '.', '\x18', '\x2', '\x66', '\v', '\x3', '\x2', '\x2', 
		'\x2', 'g', 'h', '\t', '\x2', '\x2', '\x2', 'h', '\r', '\x3', '\x2', '\x2', 
		'\x2', 'i', 'k', '\a', ':', '\x2', '\x2', 'j', 'l', '\x5', '\x38', '\x1D', 
		'\x2', 'k', 'j', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\x3', '\x2', '\x2', 
		'\x2', 'l', '\xF', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\a', ')', '\x2', 
		'\x2', 'n', 'o', '\x5', '\x12', '\n', '\x2', 'o', '\x11', '\x3', '\x2', 
		'\x2', '\x2', 'p', 'q', '\t', '\x3', '\x2', '\x2', 'q', '\x13', '\x3', 
		'\x2', '\x2', '\x2', 'r', 'w', '\x5', '\x4', '\x3', '\x2', 's', 'w', '\x5', 
		'\x16', '\f', '\x2', 't', 'w', '\x5', '\x18', '\r', '\x2', 'u', 'w', '\x5', 
		',', '\x17', '\x2', 'v', 'r', '\x3', '\x2', '\x2', '\x2', 'v', 's', '\x3', 
		'\x2', '\x2', '\x2', 'v', 't', '\x3', '\x2', '\x2', '\x2', 'v', 'u', '\x3', 
		'\x2', '\x2', '\x2', 'w', '\x15', '\x3', '\x2', '\x2', '\x2', 'x', '{', 
		'\x5', '\x1A', '\xE', '\x2', 'y', '{', '\x5', '$', '\x13', '\x2', 'z', 
		'x', '\x3', '\x2', '\x2', '\x2', 'z', 'y', '\x3', '\x2', '\x2', '\x2', 
		'{', '\x17', '\x3', '\x2', '\x2', '\x2', '|', '\x80', '\x5', '&', '\x14', 
		'\x2', '}', '\x80', '\x5', '(', '\x15', '\x2', '~', '\x80', '\x5', '*', 
		'\x16', '\x2', '\x7F', '|', '\x3', '\x2', '\x2', '\x2', '\x7F', '}', '\x3', 
		'\x2', '\x2', '\x2', '\x7F', '~', '\x3', '\x2', '\x2', '\x2', '\x80', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\a', ',', '\x2', 
		'\x2', '\x82', '\x83', '\x5', '.', '\x18', '\x2', '\x83', '\x84', '\a', 
		'-', '\x2', '\x2', '\x84', '\x89', '\x5', '\x1C', '\xF', '\x2', '\x85', 
		'\x86', '\a', '\n', '\x2', '\x2', '\x86', '\x88', '\x5', '\x1C', '\xF', 
		'\x2', '\x87', '\x85', '\x3', '\x2', '\x2', '\x2', '\x88', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '\x89', '\x87', '\x3', '\x2', '\x2', '\x2', '\x89', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x8B', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8E', '\x5', 
		'\"', '\x12', '\x2', '\x8D', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8D', 
		'\x8E', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x90', '\x3', '\x2', '\x2', 
		'\x2', '\x8F', '\x91', '\a', '\n', '\x2', '\x2', '\x90', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x90', '\x91', '\x3', '\x2', '\x2', '\x2', '\x91', 
		'\x92', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\a', '(', '\x2', 
		'\x2', '\x93', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x94', '\x99', '\x5', 
		'\x1E', '\x10', '\x2', '\x95', '\x96', '\a', '\x10', '\x2', '\x2', '\x96', 
		'\x98', '\x5', '\x1E', '\x10', '\x2', '\x97', '\x95', '\x3', '\x2', '\x2', 
		'\x2', '\x98', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x99', '\x97', '\x3', 
		'\x2', '\x2', '\x2', '\x99', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9A', 
		'\x9C', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x99', '\x3', '\x2', '\x2', 
		'\x2', '\x9C', '\x9D', '\a', '\v', '\x2', '\x2', '\x9D', '\x9E', '\x5', 
		'\x6', '\x4', '\x2', '\x9E', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x9F', 
		'\xA2', '\x5', ' ', '\x11', '\x2', '\xA0', '\xA1', '\a', '\x11', '\x2', 
		'\x2', '\xA1', '\xA3', '\x5', ' ', '\x11', '\x2', '\xA2', '\xA0', '\x3', 
		'\x2', '\x2', '\x2', '\xA2', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA3', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\t', '\x4', '\x2', 
		'\x2', '\xA5', '!', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', '\t', 
		'\x5', '\x2', '\x2', '\xA7', '\xA8', '\x5', '\x6', '\x4', '\x2', '\xA8', 
		'#', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\a', '\x30', '\x2', 
		'\x2', '\xAA', '\xAB', '\x5', '.', '\x18', '\x2', '\xAB', '\xAC', '\a', 
		'\x31', '\x2', '\x2', '\xAC', '\xAF', '\x5', '\x6', '\x4', '\x2', '\xAD', 
		'\xAE', '\a', '.', '\x2', '\x2', '\xAE', '\xB0', '\x5', '\x6', '\x4', 
		'\x2', '\xAF', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', '\x3', 
		'\x2', '\x2', '\x2', '\xB0', '%', '\x3', '\x2', '\x2', '\x2', '\xB1', 
		'\xB2', '\a', '\x32', '\x2', '\x2', '\xB2', '\xB3', '\a', ':', '\x2', 
		'\x2', '\xB3', '\xB4', '\a', '\x14', '\x2', '\x2', '\xB4', '\xB5', '\x5', 
		'.', '\x18', '\x2', '\xB5', '\xB6', '\t', '\x6', '\x2', '\x2', '\xB6', 
		'\xB7', '\x5', '.', '\x18', '\x2', '\xB7', '\xB8', '\a', '\x35', '\x2', 
		'\x2', '\xB8', '\xB9', '\x5', '\x6', '\x4', '\x2', '\xB9', '\xC2', '\x3', 
		'\x2', '\x2', '\x2', '\xBA', '\xBB', '\a', '\x32', '\x2', '\x2', '\xBB', 
		'\xBC', '\a', ':', '\x2', '\x2', '\xBC', '\xBD', '\a', '\x1A', '\x2', 
		'\x2', '\xBD', '\xBE', '\x5', '.', '\x18', '\x2', '\xBE', '\xBF', '\a', 
		'\x35', '\x2', '\x2', '\xBF', '\xC0', '\x5', '\x6', '\x4', '\x2', '\xC0', 
		'\xC2', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xB1', '\x3', '\x2', '\x2', 
		'\x2', '\xC1', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xC2', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\xC3', '\xC4', '\a', '\x36', '\x2', '\x2', '\xC4', 
		'\xC9', '\x5', '\x6', '\x4', '\x2', '\xC5', '\xC6', '\a', '\n', '\x2', 
		'\x2', '\xC6', '\xC8', '\x5', '\x6', '\x4', '\x2', '\xC7', '\xC5', '\x3', 
		'\x2', '\x2', '\x2', '\xC8', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xC9', 
		'\xC7', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\x3', '\x2', '\x2', 
		'\x2', '\xCA', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xC9', '\x3', 
		'\x2', '\x2', '\x2', '\xCC', '\xCD', '\a', '\x37', '\x2', '\x2', '\xCD', 
		'\xCE', '\x5', '.', '\x18', '\x2', '\xCE', ')', '\x3', '\x2', '\x2', '\x2', 
		'\xCF', '\xD0', '\a', '\x38', '\x2', '\x2', '\xD0', '\xD1', '\x5', '.', 
		'\x18', '\x2', '\xD1', '\xD2', '\a', '\x35', '\x2', '\x2', '\xD2', '\xD3', 
		'\x5', '\x6', '\x4', '\x2', '\xD3', '+', '\x3', '\x2', '\x2', '\x2', '\xD4', 
		'\xD5', '\a', '\x39', '\x2', '\x2', '\xD5', '\xDA', '\a', ':', '\x2', 
		'\x2', '\xD6', '\xD7', '\a', '\x10', '\x2', '\x2', '\xD7', '\xD9', '\a', 
		':', '\x2', '\x2', '\xD8', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD9', 
		'\xDC', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xD8', '\x3', '\x2', '\x2', 
		'\x2', '\xDA', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDD', '\x3', 
		'\x2', '\x2', '\x2', '\xDC', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDD', 
		'\xDE', '\a', '\x35', '\x2', '\x2', '\xDE', '\xDF', '\x5', '\x6', '\x4', 
		'\x2', '\xDF', '-', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE3', '\x5', 
		'\x30', '\x19', '\x2', '\xE1', '\xE2', '\a', '\x19', '\x2', '\x2', '\xE2', 
		'\xE4', '\x5', '\x30', '\x19', '\x2', '\xE3', '\xE1', '\x3', '\x2', '\x2', 
		'\x2', '\xE3', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE4', '/', '\x3', 
		'\x2', '\x2', '\x2', '\xE5', '\xEA', '\x5', '\x32', '\x1A', '\x2', '\xE6', 
		'\xE7', '\a', '\x1C', '\x2', '\x2', '\xE7', '\xE9', '\x5', '\x32', '\x1A', 
		'\x2', '\xE8', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEC', '\x3', 
		'\x2', '\x2', '\x2', '\xEA', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xEA', 
		'\xEB', '\x3', '\x2', '\x2', '\x2', '\xEB', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\xEC', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xED', '\xF2', '\x5', 
		'\x34', '\x1B', '\x2', '\xEE', '\xEF', '\a', '\x1F', '\x2', '\x2', '\xEF', 
		'\xF1', '\x5', '\x34', '\x1B', '\x2', '\xF0', '\xEE', '\x3', '\x2', '\x2', 
		'\x2', '\xF1', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF0', '\x3', 
		'\x2', '\x2', '\x2', '\xF2', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF3', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF2', '\x3', '\x2', '\x2', 
		'\x2', '\xF5', '\xF6', '\a', '\f', '\x2', '\x2', '\xF6', '\xF7', '\x5', 
		'.', '\x18', '\x2', '\xF7', '\xF8', '\a', '\r', '\x2', '\x2', '\xF8', 
		'\x104', '\x3', '\x2', '\x2', '\x2', '\xF9', '\x104', '\a', ':', '\x2', 
		'\x2', '\xFA', '\x104', '\x5', '\x36', '\x1C', '\x2', '\xFB', '\x104', 
		'\x5', ':', '\x1E', '\x2', '\xFC', '\xFD', '\a', '*', '\x2', '\x2', '\xFD', 
		'\x104', '\x5', '\x34', '\x1B', '\x2', '\xFE', '\xFF', '\a', '+', '\x2', 
		'\x2', '\xFF', '\x104', '\x5', '\x34', '\x1B', '\x2', '\x100', '\x104', 
		'\x5', '<', '\x1F', '\x2', '\x101', '\x104', '\x5', '@', '!', '\x2', '\x102', 
		'\x104', '\x5', '\x42', '\"', '\x2', '\x103', '\xF5', '\x3', '\x2', '\x2', 
		'\x2', '\x103', '\xF9', '\x3', '\x2', '\x2', '\x2', '\x103', '\xFA', '\x3', 
		'\x2', '\x2', '\x2', '\x103', '\xFB', '\x3', '\x2', '\x2', '\x2', '\x103', 
		'\xFC', '\x3', '\x2', '\x2', '\x2', '\x103', '\xFE', '\x3', '\x2', '\x2', 
		'\x2', '\x103', '\x100', '\x3', '\x2', '\x2', '\x2', '\x103', '\x101', 
		'\x3', '\x2', '\x2', '\x2', '\x103', '\x102', '\x3', '\x2', '\x2', '\x2', 
		'\x104', '\x35', '\x3', '\x2', '\x2', '\x2', '\x105', '\x107', '\a', ':', 
		'\x2', '\x2', '\x106', '\x108', '\x5', '\x38', '\x1D', '\x2', '\x107', 
		'\x106', '\x3', '\x2', '\x2', '\x2', '\x107', '\x108', '\x3', '\x2', '\x2', 
		'\x2', '\x108', '\x37', '\x3', '\x2', '\x2', '\x2', '\x109', '\x112', 
		'\a', '\f', '\x2', '\x2', '\x10A', '\x10F', '\x5', '.', '\x18', '\x2', 
		'\x10B', '\x10C', '\a', '\x10', '\x2', '\x2', '\x10C', '\x10E', '\x5', 
		'.', '\x18', '\x2', '\x10D', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x10E', 
		'\x111', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x10D', '\x3', '\x2', '\x2', 
		'\x2', '\x10F', '\x110', '\x3', '\x2', '\x2', '\x2', '\x110', '\x113', 
		'\x3', '\x2', '\x2', '\x2', '\x111', '\x10F', '\x3', '\x2', '\x2', '\x2', 
		'\x112', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x112', '\x113', '\x3', 
		'\x2', '\x2', '\x2', '\x113', '\x114', '\x3', '\x2', '\x2', '\x2', '\x114', 
		'\x115', '\a', '\r', '\x2', '\x2', '\x115', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\x116', '\x117', '\t', '\a', '\x2', '\x2', '\x117', ';', '\x3', 
		'\x2', '\x2', '\x2', '\x118', '\x119', '\a', '\xE', '\x2', '\x2', '\x119', 
		'\x11E', '\x5', '>', ' ', '\x2', '\x11A', '\x11B', '\a', '\x10', '\x2', 
		'\x2', '\x11B', '\x11D', '\x5', '>', ' ', '\x2', '\x11C', '\x11A', '\x3', 
		'\x2', '\x2', '\x2', '\x11D', '\x120', '\x3', '\x2', '\x2', '\x2', '\x11E', 
		'\x11C', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x11F', '\x3', '\x2', '\x2', 
		'\x2', '\x11F', '\x121', '\x3', '\x2', '\x2', '\x2', '\x120', '\x11E', 
		'\x3', '\x2', '\x2', '\x2', '\x121', '\x122', '\a', '\xF', '\x2', '\x2', 
		'\x122', '=', '\x3', '\x2', '\x2', '\x2', '\x123', '\x126', '\x5', '.', 
		'\x18', '\x2', '\x124', '\x125', '\a', '\x11', '\x2', '\x2', '\x125', 
		'\x127', '\x5', '.', '\x18', '\x2', '\x126', '\x124', '\x3', '\x2', '\x2', 
		'\x2', '\x126', '\x127', '\x3', '\x2', '\x2', '\x2', '\x127', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x128', '\x129', '\a', ':', '\x2', '\x2', '\x129', 
		'\x12A', '\a', '\f', '\x2', '\x2', '\x12A', '\x12B', '\x5', '.', '\x18', 
		'\x2', '\x12B', '\x12C', '\a', '\r', '\x2', '\x2', '\x12C', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x12D', '\x12E', '\a', '\x12', '\x2', '\x2', '\x12E', 
		'\x12F', '\a', ':', '\x2', '\x2', '\x12F', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', 'M', 'Q', 'X', '\\', '\x61', 'k', 'v', 'z', '\x7F', '\x89', 
		'\x8D', '\x90', '\x99', '\xA2', '\xAF', '\xC1', '\xC9', '\xDA', '\xE3', 
		'\xEA', '\xF2', '\x103', '\x107', '\x10F', '\x112', '\x11E', '\x126',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
